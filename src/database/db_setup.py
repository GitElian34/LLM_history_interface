import sqlite3
from pathlib import Path
import os

# Chemin de la base (dans le m√™me dossier que ce fichier)
DB_PATH = Path(__file__).parent / "data.db"

def create_tables():
    """ Cr√©ation de 3 tables :
    - La table articles, qui va contenir le nom des articles (ou leur num√©ro plutot) ainsi que l'√©tat de compl√©tion de ces derniers
    - La table items, qui va contenir pour chaque article tous les mots mis en avants de 5 types diff√©rents :
     Loc pour les lieux, Org pour les organismes  PER pour les personnes, Number pour les ann√©es et Period pour les p√©riodes historiques
     accompagn√©s de leur m√©thode d'extraction (highlight par d√©faut) et de leur pertinence (initialis√© √† null et qui doit √™tre
     modifi√© lors de l'utilisation de l'appli)
    - La table pages, qui va contenir les pages de l'article d√©ja annot√© afin de r√©duire le temps d'ex√©cution et d'utilisation de l'appli
    """
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # Table articles (sans auto-increment, juste int)
    cur.execute("""
     CREATE TABLE IF NOT EXISTS articles (
         article_id INT PRIMARY KEY,
         etat TEXT
     )
     """)
    # Table des items (cl√© primaire composite : article_id + word + method)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS items (
        article_id INTEGER NOT NULL,
        word TEXT NOT NULL,
        type TEXT NOT NULL,
        method TEXT NOT NULL,
        pertinence TEXT,
        PRIMARY KEY (article_id, word, method),
        FOREIGN KEY (article_id) REFERENCES articles(article_id)
    )
    """)

    # üî• Nouvelle table pour stocker le texte par page
    cur.execute("""
    CREATE TABLE IF NOT EXISTS pages (
        article_id INTEGER NOT NULL,
        page_number TEXT NOT NULL,
        text TEXT,
        PRIMARY KEY (article_id, page_number),
        FOREIGN KEY (article_id) REFERENCES articles(article_id)
    )
    """)

    conn.commit()
    conn.close()

def reset_database():
    """Supprime la base et recr√©e les tables vides."""
    if DB_PATH.exists():
        os.remove(DB_PATH)
        print("üí• Base de donn√©es supprim√©e.")

    create_tables()
    print("‚úÖ Nouvelles tables (articles + items + pages) initialis√©es.")

if __name__ == "__main__":
    reset_database()